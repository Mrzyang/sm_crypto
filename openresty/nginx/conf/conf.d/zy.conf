server {
    listen 8081;
    server_name localhost;
    # 设置默认 MIME 类型，这一句会全局覆盖掉http模块中MIME的设定
    #default_type text/html;
    #charset koi8-r;

    #access_log  logs/host.access.log  main;
    error_log logs/error_8080.log debug;

    location / {
        root html;
        index index.html index.htm;
    }

    location /test {
        return 200 "Hello, OpenResty with SM2/SM3/SM4!";
    }

    location /hello {
        content_by_lua_file lua/sm_crypto/test/hello.lua;
    }
    location /luablock {
        # 使用 Lua 代码来生成响应
        content_by_lua_block {
            -- 设置响应的 MIME 类型为 text/plain
            ngx.header.content_type = "text/html; charset=utf-8" -- 设置字符集为 utf-8
            ngx.say("Hello from Lua!")
            ngx.exit(200) -- 返回 HTTP 200 状态码
        }
    }

    location /internal_openssl_info {
        content_by_lua_file lua/sm_crypto/internal_openssl_info.lua;
    }

    location /sm2_genkeys {
        content_by_lua_file lua/sm_crypto/sm2_genkeys.lua;
    }

    location /sm2 {
        content_by_lua_file lua/sm_crypto/sm2.lua;
    }
    location /sm3 {
        content_by_lua_file lua/sm_crypto/sm3.lua;
    }

    location /sm4 {
        content_by_lua_file lua/sm_crypto/sm4.lua;
    }

    location /endpoint01 {
        access_by_lua_file lua/sm_crypto/access.lua;
        # 备注：用 header_filter_by_lua_和body_filter_by_lua有顺序上的局限性，无法实现同时签名和加密
        # 在 body_filter 阶段捕获响应体并替换为密文，此时响应头已经发送。
        #body_filter_by_lua_file lua/sm_crypto/encrypt_resp.lua;
        # 在 header_filter 阶段处理响应头，此时响应体还未生成或发送。
        #eader_filter_by_lua_file lua/sm_crypto/sign_resp.lua;
    }
    # 用于发起子请求的 location，直接代理到后端服务。我这里设的规则是uri为入口uri后面添加下划线
    location /endpoint01_ {
        allow 127.0.0.1;
        allow ::1;
        deny all;
        proxy_pass http://127.0.0.1:3000/api/test/hello;
        proxy_set_header Host $host;
    }


    # 这种方式对响应报文进行回签和加密，只能是后面endpoint响应时先把响应体hash（例如sm3）一下并插在响应头中，然后在header_filter_by_lua中
    # 取hash进行非对称(例如sm2)签名，再更新响应头中的x-signature字段；加密则在body_filter_by_lua中区响应体进行对称(例如sm4),然后替换密文给客户端。
    location /resp_sign_encrypt {
        proxy_pass http://127.0.0.1:3000/api/test/headerWithHashed;
        # 备注：用 header_filter_by_lua_和body_filter_by_lua有顺序上的局限性，无法实现同时签名和加密，请看上面说明
        # 在 header_filter 阶段处理响应头，此时响应体还未生成或发送。
        header_filter_by_lua_file lua/sm_crypto/test/sign_resp.lua;
        # 在 body_filter 阶段捕获响应体并替换为密文，此时响应头已经发送。
        body_filter_by_lua_file lua/sm_crypto/test/encrypt_resp.lua;
    }
    #error_page  404              /404.html;
    # redirect server error pages to the static page /50x.html
    #
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root html;
    }

    # location /api/ {
    #     # 只转换端口，URL不变
    #     # http://127.0.0.1:8080/api/user/list -> http://127.0.0.1:3000/api/user/list
    #     proxy_pass http://127.0.0.1:3000/api/;
    # }

    # location /api/ {
    #     # 转换端口，且URL省略了/api/前缀
    #     # http://127.0.0.1:8080/api/user/list -> http://127.0.0.1:3000/user/list
    #     proxy_pass http://127.0.0.1:3000/;
    # }
    # location /api/ {
    #     # 重写 URL，去掉 /api/ 前缀并将其代理到本地 3000 端口，添加 /project01/ 前缀
    #     # http://127.0.0.1:8080/api/user/list -> http://127.0.0.1:3000/project01/user/list
    #     rewrite ^/api/(.*)$ /project01/$1 break;
    #     # 代理请求到本地 3000 端口
    #     proxy_pass http://localhost:3000/;
    #     # 以下是一些常见的代理配置
    #     proxy_set_header Host $host;
    #     proxy_set_header X-Real-IP $remote_addr;
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     proxy_set_header X-Forwarded-Proto $scheme;
    # }
}